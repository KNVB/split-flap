import { useEffect, useRef, useState } from "react";
import { useInterval } from "./useInterval";
import "./Slot.css";
export default function GG() {
    const [itemList, updateItemList] = useState({
        action: "init",
        fullCard: '',
        lowerHalfCard: "",
        newIndex: 1,
        oldIndex: 0,
        upperHalfCard: ""
    });
    let className = "splitFlap", hinge;
    let baseDiv = useRef(), lowerDiv = useRef(), middleDiv = useRef(), upperDiv = useRef();
    let wordList = [
        <img alt="" src="img/0.png" />, <img alt="" src="img/1.png" />,
        <img alt="" src="img/2.png" />, <img alt="" src="img/3.png" />,
        <img alt="" src="img/4.png" />, <img alt="" src="img/5.png" />,
        <img alt="" src="img/6.png" />, <img alt="" src="img/7.png" />,
        <img alt="" src="img/8.png" />, <img alt="" src="img/9.png" />
    ];
    let handler = (id) => {
        console.log("id=" + id);
        switch (id) {
            case "middle":
                upperDiv.current.innerHTML = baseDiv.current.innerHTML;
                lowerDiv.current.innerHTML = baseDiv.current.innerHTML;
                
                lowerDiv.current.className=itemList.lowerHalfCard + " zIndex2";
                middleDiv.current.className="hide";
                upperDiv.current.className=itemList.upperHalfCard + " zIndex4";
                break;
            case "upper":
                middleDiv.current.className+=" rotate90to0";
                upperDiv.current.className=upperDiv.current.className.replace("zIndex4", "zIndex2");
                break;
            default:
                break;
        }
    }
    useEffect(() => {
        let temp = { ...itemList };
        if ((hinge === undefined) || (hinge === true)) {
            temp.fullCard = "fullCard-after";
            temp.lowerHalfCard = "lowerHalfCard-after";
            temp.upperHalfCard = "upperHalfCard-after";
        } else {
            temp.fullCard = "fullCard";
            temp.lowerHalfCard = "lowerHalfCard";
            temp.upperHalfCard = "upperHalfCard";
        }
        middleDiv.current.className="hide";
        lowerDiv.current.className=temp.lowerHalfCard + " zIndex2";        
        upperDiv.current.className=temp.upperHalfCard + " zIndex4";
        updateItemList(temp);
    }, [])
    useInterval(() => {
        let temp = { ...itemList };
        temp.newIndex++;
        if (temp.newIndex === wordList.length) {
            temp.newIndex = 0;
        }
        temp.oldIndex++;
        if (temp.oldIndex === wordList.length) {
            temp.oldIndex = 0;
        }
        updateItemList(temp);
    },1000);
    useEffect(()=>{
        if (document.hasFocus()) {
            middleDiv.current.innerHTML = baseDiv.current.innerHTML;
            upperDiv.current.classList.add("rotate0to_90");
            middleDiv.current.className=itemList.lowerHalfCard+" transform0to90 zIndex4";
        }else {
            middleDiv.current.className="hide";
            lowerDiv.current.className=itemList.lowerHalfCard + " zIndex2";        
            upperDiv.current.className=itemList.upperHalfCard + " zIndex4";
        }
    },[itemList.newIndex,itemList.oldIndex])
    return (
        <div className={className}
            style={{
                "position": "relative",
                "boxSizing": "border-box",
                "transformStyle": "preserve-3d"
            }}>
            <div
                id="base"
                ref={baseDiv}>
                {wordList[itemList.newIndex]}
            </div>
            <div
                id="upper"
                onAnimationEnd={(e) => handler(e.target.id)}
                ref={upperDiv}>
                {wordList[itemList.oldIndex]}
            </div>
            <div
                id="middle"
                onAnimationEnd={(e) => handler(e.target.id)}
                ref={middleDiv}>
            </div>
            <div
                id="lower"
                onAnimationEnd={(e) => handler(e.target.id)}
                ref={lowerDiv}>
                {wordList[itemList.oldIndex]}
            </div>
        </div>
    );
}